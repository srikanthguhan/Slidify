mtcars$am[mtcars$am=="0"]<-"Automatic"
data(mtcars)
attach(mtcars)
mtcars$am[mtcars$am=="0"]<-"Automatic"
mtcars$am[mtcars$am==1]<-"Manual"
mtcars$am<-as.factor(mtcars$am)
mtcars$cyl<-as.factor(mtcars$cyl)
mtcars$vs<-as.factor(mtcars$vs)
mtcars$gear<-as.factor(mtcars$gear)
mtcars$carb<-as.factor(mtcars$carb)
boxplot(mpg~am)
boxplot(mpg~am,names = c("automatic","manual"))
coplot(mpg ~ disp | as.factor(cyl), data = mtcars,
panel = panel.smooth, rows = 1)
coplot(mpg ~ disp | am, data = mtcars,
panel = panel.smooth, rows = 1)
coplot(mpg ~ wt | am, data = mtcars,
panel = panel.smooth, rows = 1)
boxplot(mpg~am,names = c("automatic","manual"))
mtcars[mtcars$am == 0,]
mtcars[mtcars$am == "Automatic",]
autoData <- mtcars[mtcars$am == "Automatic",]
manualData <- mtcars[mtcars$am == "Manual",]
t.test(autoData$mpg, manualData$mpg)
t.test(autoData$mpg, manualData$mpg)
t.test(x = autoData$mpg,y =  manualData$mpg)
t.test(x = autoData$mpg,y =  manualData$mpg)
autoData <- mtcars[am == "Automatic",]
t.test(x = autoData$mpg,y =  manualData$mpg)
autoData <- mtcars[am == "Automatic",]
mtcars[am == "Automatic",]
data(mtcars)
attach(mtcars)
str(mtcars)
mtcars$am<-as.factor(mtcars$am)
mtcars$cyl<-as.factor(mtcars$cyl)
mtcars$vs<-as.factor(mtcars$vs)
mtcars$gear<-as.factor(mtcars$gear)
mtcars$carb<-as.factor(mtcars$carb)
boxplot(mpg~am,names = c("automatic","manual"))
autoData <- mtcars[am == "Automatic",]
mtcars
autoData <- mtcars[am == 0,]
manualData <- mtcars[am == 1,]
t.test(x = autoData$mpg,y =  manualData$mpg)
stepmodel <- step(lm(data=mtcars, mpg ~ .), direction="both")
fit<-lm(mpg ~ cyl + hp + wt + am)
summary(fir)
summary(fit)
am
levels(am)
str(am)
mtcars$am<-as.factor(mtcars$am)
mtcars$cyl<-as.factor(mtcars$cyl)
mtcars$vs<-as.factor(mtcars$vs)
mtcars$gear<-as.factor(mtcars$gear)
mtcars$carb<-as.factor(mtcars$carb)
stepmodel <- step(lm(data=mtcars, mpg ~ .), direction="both")
fit<-lm(mpg ~ cyl + hp + wt + am)
summary(fit)
fit<-lm(mpg ~ cyl + hp + wt)
summary(fit)
fit<-lm(mpg ~ cyl + hp + wt + am)
summary(fit)
mtcars$am<-as.factor(mtcars$am)
mtcars$cyl<-as.factor(mtcars$cyl)
mtcars$vs<-as.factor(mtcars$vs)
mtcars$gear<-as.factor(mtcars$gear)
mtcars$carb<-as.factor(mtcars$carb)
attach(mtcars)
fit<-lm(mpg ~ cyl + hp + wt + am)
summary(fit)
am
data(mtcars)
str(mtcars)
mtcars$am<-as.factor(mtcars$am)
mtcars$cyl<-as.factor(mtcars$cyl)
mtcars$vs<-as.factor(mtcars$vs)
mtcars$gear<-as.factor(mtcars$gear)
mtcars$carb<-as.factor(mtcars$carb)
attach(mtcars)
autoData <- mtcars[am == 0,]
manualData <- mtcars[am == 1,]
t.test(x = autoData$mpg,y =  manualData$mpg)
stepmodel <- step(lm(data=mtcars, mpg ~ .), direction="both")
fit<-lm(mpg ~ cyl + hp + wt + am)
cyl
hp
wt
am
summary(fit)
stepmodel <- step(lm(data=mtcars, mpg ~ .), direction="forward")
stepmodel <- step(lm(data=mtcars, mpg ~ .), direction="backwards")
stepmodel <- step(lm(data=mtcars, mpg ~ .), direction="backward")
fit<-lm(mpg ~ cyl + hp + wt + am)
summary(fit)
plot(fit)
par(mfrow = c(2,2))
plot(fit)
fit<-lm(mpg~am)
summary(fit)
fit<-lm(mpg ~ cyl + hp + wt + am)
fitbasic<-lm(mpg~am)
summary(fitbasic)
anova(fit,fitbasic)
step(lm(data=mtcars, mpg ~ .), direction="backward")
fit$model
fit$coefficients
fit$effects
fit$fitted.values
fit<-lm(mpg ~ cyl + hp + wt + am)
fit$coefficients
summary(fit)
install_from_swirl("Regression Models")
library(swirl)
install_from_swirl("Regression Models")
swirl()
plot(child ~ parent, galton)
plot(jitter(child,4) ~ parent,galton)
regrline <- lm(child ~ parent, galton)
abline(regrline, lwd=3, col='red')
summary(regrline)
ravenData
mdl
mdl<-glm()
names(ravenData)
mdl <- glm(ravenWinNum ~ ravenScore, binomial, ravenData)
predict(mdl)
lodds <- predict(mdl, data.frame(ravenScore=c(0, 3, 6)))
exp(lodds)/(1+exp(lodds))
summary(lodds)
summary(mdl)
confint(mdl)
exp(confint(mdl))
anova(mdl)
qchisq(0.95, 1)
asd
asd
names(ravenData)
fit <- lm(child ~ parent, galton)
summary(fit)
fit$residuals
mean(fit$residuals)
cov(fit$residuals,galton$parent)
predict(mdl)
ols.ic <- fit$coef[1
]
fit$coef[2]
ols.slope <- fit$coef[2]
rhs <- numeric()
lhs-rhs
lhs <- numeric()
all.equal(lhs,rhs)
for (n in 1:6) rhs[n] <- sqe(ols.slope,ols.ic) + sum(est(sltweak[n],ictweak[n])^2)
varChild <- var(galton$child)
for (n in 1:6) rhs[n] <- sqe(ols.slope,ols.ic) + sum(est(sltweak[n],ictweak[n])^2)
varRes <- var(fit$residuals)
for (n in 1:6) rhs[n] <- sqe(ols.slope,ols.ic) + sum(est(sltweak[n],ictweak[n])^2)
varEst <- var(est(ols.slope, ols.ic))
for (n in 1:6) rhs[n] <- sqe(ols.slope,ols.ic) + sum(est(sltweak[n],ictweak[n])^2)
all.equal(varChild,varEst+varRes)
efit <- lm(accel ~ mag+dist, attenu)
for (n in 1:6) rhs[n] <- sqe(ols.slope,ols.ic) + sum(est(sltweak[n],ictweak[n])^2)
mean(efit$residuals)
cov(attenu$mag)
cov(attenu$mag)
for (n in 1:6) rhs[n] <- sqe(ols.slope,ols.ic) + sum(est(sltweak[n],ictweak[n])^2)
cov(efit$residuals, attenu$mag)
for (n in 1:6) rhs[n] <- sqe(ols.slope,ols.ic) + sum(est(sltweak[n],ictweak[n])^2)
cov(efit$residuals, attenu$dist)
library(caret)
install.packages("caret")
install.packages("AppliedPredictiveModeling")
?createDataPartition
args(createDataPartition)
library(caret)
library(AppliedPredictiveModeling)
args(createDataPartition)
?createDataPartition
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(1000)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
library(AppliedPredictiveModeling)
install.packages("AppliedPredictiveModeling")
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(1000)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
hist(SuperPlasticizer)
hist(training$SuperPlasticizer)
training$Superplasticizer
hist(training$Superplasticizer)
log(training$Superplasticizer)
hist(log(training$Superplasticizer))
hist(log(training$Superplasticizer)+1)
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
which(colnames(training) in "IL%")
which(colnames(training), "IL%")
colnames(training)
IL_col_idx <- grep("^[Ii][Ll].*", names(training))
IL_col_idx
preObj <- preProcess(training[, IL_col_idx], method=c("center", "scale", "pca"), thresh=0.9)
preObj
preObj <- preProcess(training[, IL_col_idx], method=c("center", "scale", "pca"), thresh=0.8)
preObj
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
grep("^[Ii][Ll].*", names(training))
preObj <- preProcess(training[, IL_col_idx], method=c("center", "scale", "pca"), thresh=0.8)
IL_col_idx <- grep("^[Ii][Ll].*", names(training))
preObj <- preProcess(training[, IL_col_idx], method=c("center", "scale", "pca"), thresh=0.8)
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
IL_col_idx <- grep("^[Ii][Ll].*", names(training))
suppressMessages(library(dplyr))
new_training <- training[, c(names(training)[IL_col_idx], "diagnosis")]
names(new_training)
IL_col_idx <- grep("^[Ii][Ll].*", names(testing))
suppressMessages(library(dplyr))
new_testing <- testing[, c(names(testing)[IL_col_idx], "diagnosis")]
names(new_testing)
new_testing
non_pca_model <- train(diagnosis ~ ., data=new_training, method="glm")
non_pca_model <- train(diagnosis ~ ., data=new_training, method="glm")
install.packages("e1071")
non_pca_model <- train(diagnosis ~ ., data=new_training, method="glm")
non_pca_result <- confusionMatrix(new_testing[, 13],
predict(non_pca_model, new_testing[, -13]))
non_pca_result
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(1000)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
hist(log(training$Superplasticizer)+1)
hist(training$Superplasticizer)
install.packages("devtools"); library(devtools)
install.packages("Rcpp"); library(Rcpp)
require(devtools)
install_github('ramnathv/rCharts')
install_github('rstudio/shinyapps')
install.packages("Rcpp")
library(slidify)
devtools::install_github('rstudio/shinyapps')
library(devtools)
install.packages("devtools"); library(devtools)
library(devtools)
devtools::install_github('rstudio/shinyapps')
shinyapps::setAccountInfo(name='srikanthguhan', token='32C74A9DB4F7103CBA1D3DB0A9F9C6B5', secret='8nIqa8Jq3OA71DWDDEUAy51jKPIGlRu0lrLcAhO4')
getwd()
shinyapps::deployApp('C:/Users/ABC/datasciencecoursera/Shiny')
library(slidify)
author("Slidify")
---
title       : Developing Data Products Pitch
subtitle    : Chi-Square to P-value calculator
author      : Srikanth Guhan
job         : Management Student
framework   : io2012        # {io2012, html5slides, shower, dzslides, ...}
highlighter : Reveal.js  # {highlight.js, prettify, highlight}
hitheme     : tomorrow      #
widgets     : []            # {mathjax, quiz, bootstrap}
mode        : selfcontained # {standalone, draft}
knit        : slidify::knit2slides
---
## Read-And-Delete
1. Edit YAML front matter
2. Write using R Markdown
3. Use an empty line followed by three dashes to separate slides!
--- .class #id
## Slide 2
slidify(Index.Rmd)
slidify(index.Rmd)
getwd()
setwd(C:/Users/ABC/datasciencecoursera)
setwd("C:/Users/ABC/datasciencecoursera")
slidify(index.Rmd)
setwd("C:/Users/ABC/datasciencecoursera/Slidify")
slidify('index.Rmd')
library(knitr)
browseURL('index.html')
slidify('index.Rmd')
browseURL('index.html')
slidify('index.Rmd')
browseURL('index.html')
slidify('index.Rmd')
browseURL('index.html')
slidify('index.Rmd')
browseURL('index.html')
slidify(index.Rmd)
slidify('index.Rmd')
slidify('index.Rmd')
browseURL('index.html')
slidify('index.Rmd')
browseURL('index.html')
slidify('index.Rmd')
browseURL('index.html')
slidify('index.Rmd')
browseURL('index.html')
slidify('index.Rmd')
slidify('index.Rmd')
browseURL('index.html')
slidify('index.Rmd')
browseURL('index.html')
slidify('index.Rmd')
browseURL('index.html')
slidify('index.Rmd')
browseURL('index.html')
slidify('index.Rmd')
slidify('index.Rmd')
browseURL('index.html')
slidify('index.Rmd')
browseURL('index.html')
slidify('index.Rmd')
browseURL('index.html')
slidify('index.Rmd')
browseURL('index.html')
slidify('index.Rmd')
browseURL('index.html')
slidify('index.Rmd')
browseURL('index.html')
slidify('index.Rmd')
slidify('index.Rmd')
browseURL('index.html')
slidify('index.Rmd')
browseURL('index.html')
slidify('index.Rmd')
browseURL('index.html')
slidify('index.Rmd')
browseURL('index.html')
slidify('index.Rmd')
browseURL('index.html')
slidify('index.Rmd')
browseURL('index.html')
slidify('index.Rmd')
browseURL('index.html')
slidify('index.Rmd')
browseURL('index.html')
getwd()
slidify('index.Rmd')
browseURL('index.html')
slidify('index.Rmd')
browseURL('index.html')
slidify('index.Rmd')
browseURL('index.html')
slidify('index.Rmd')
browseURL('index.html')
slidify('index.Rmd')
browseURL('index.html')
slidify('index.Rmd')
browseURL('index.html')
slidify('index.Rmd')
browseURL('index.html')
slidify('index.Rmd')
browseURL('index.html')
slidify('index.Rmd')
browseURL('index.html')
slidify('index.Rmd')
browseURL('index.html')
slidify('index.Rmd')
browseURL('index.html')
slidify('index.Rmd')
browseURL('index.html')
browseURL('index.html')
slidify('index.Rmd')
browseURL('index.html')
browseURL('index.html')
slidify('index.Rmd')
browseURL('index.html')
slidify('index.Rmd')
browseURL('index.html')
slidify('index.Rmd')
browseURL('index.html')
slidify('index.Rmd')
browseURL('index.html')
slidify('index.Rmd')
browseURL('index.html')
slidify('index.Rmd')
browseURL('index.html')
slidify('index.Rmd')
browseURL('index.html')
slidify('index.Rmd')
browseURL('index.html')
slidify('index.Rmd')
browseURL('index.html')
slidify('index.Rmd')
browseURL('index.html')
1349*0.3
549*0.3
slidify('index.Rmd')
browseURL('index.html')
slidify('index.Rmd')
browseURL('index.html')
slidify('index.Rmd')
browseURL('index.html')
browseURL('index.html')
browseURL('index.html')
browseURL('index.html')
slidify('index.Rmd')
browseURL('index.html')
405*0.8
405*1.8
165*1.8
slidify('index.Rmd')
browseURL('index.html')
pchisq(q = 4 , df = 1 , lower.tail = F)
slidify('index.Rmd')
browseURL('index.html')
729*0.7
297*0.7
slidify('index.Rmd')
browseURL('index.html')
slidify('index.Rmd')
browseURL('index.html')
slidify('index.Rmd')
browseURL('index.html')
slidify('index.Rmd')
browseURL('index.html')
slidify('index.Rmd')
browseURL('index.html')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
browseURL('index.html')
slidify('index.Rmd')
browseURL('index.html')
slidify('index.Rmd')
browseURL('index.html')
slidify('index.Rmd')
browseURL('index.html')
slidify('index.Rmd')
browseURL('index.html')
slidify('index.Rmd')
browseURL('index.html')
slidify('index.Rmd')
browseURL('index.html')
slidify('index.Rmd')
browseURL('index.html')
slidify('index.Rmd')
browseURL('index.html')
slidify('index.Rmd')
browseURL('index.html')
slidify('index.Rmd')
browseURL('index.html')
slidify('index.Rmd')
browseURL('index.html')
slidify('index.Rmd')
browseURL('index.html')
slidify('index.Rmd')
browseURL('index.html')
slidify('index.Rmd')
browseURL('index.html')
slidify('index.Rmd')
browseURL('index.html')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
browseURL('index.html')
slidify('index.Rmd')
browseURL('index.html')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
browseURL('index.html')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
browseURL('index.html')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
browseURL('index.html')
slidify('index.Rmd')
browseURL('index.html')
browseURL('index.html')
browseURL('index.html')
publish(user = "srikanthguhan@gmail.com", repo = "Slidify")
publish(user = "srikanthguhan", repo = "Slidify")
getwd()
publish(user = "srikanthguhan", repo = "Slidify",host = "Github")
publish(user = "srikanthguhan", repo = "Slidify")
install.packages("git")
